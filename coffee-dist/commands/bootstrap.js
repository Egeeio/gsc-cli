// Generated by CoffeeScript 2.4.1
(function() {
  var BootstrapCommand, Chalk, Command, GameServer, exec, execSync, flags, fs, spawn;

  fs = require("fs").promises;

  Chalk = require("chalk");

  GameServer = require("../server_builder");

  ({Command, flags} = require('@oclif/command'));

  ({execSync, exec, spawn} = require('child_process'));

  BootstrapCommand = (function() {
    var gameLookup, tmpPath;

    class BootstrapCommand extends Command {
      downloadFile() {
        execSync(`rm -rf ${tmpPath}`);
        return execSync(`git clone https://github.com/Egeeio/gsd-config.git ${tmpPath} --quiet`);
      }

      transformConfig(name) {
        var filePath;
        filePath = `${tmpPath}/${gameLookup[name]}`;
        execSync(`sed -i "s/USER_NAME/${process.env.USER}/" ${filePath}`);
        execSync(`cp -f ${filePath} ${process.env.PWD}`);
        return this.log(Chalk.blue(`Created '${flags.name}' config file at: ${process.env.PWD}/${flags.name}.json`));
      }

      run() {
        ({flags} = this.parse(BootstrapCommand));
        if (gameLookup[flags.name]) {
          this.downloadFile();
          return this.transformConfig(flags.name);
        } else {
          this.log(Chalk.red.bold(`Unable to find '${flags.name}' in supported games list.`));
          return process.exit();
        }
      }

    };

    tmpPath = "/tmp/gsd-config";

    gameLookup = {
      gmod: 'gmod.json',
      minecraft: 'minecraft.json',
      rust: 'rust.json',
      sdtd: 'sdtd.json',
      tf2: 'tf2.json',
      scp: 'scp.json'
    };

    return BootstrapCommand;

  }).call(this);

  BootstrapCommand.description = "Creates a default gsd game configuration file and places it in the current directory.";

  BootstrapCommand.flags = {
    name: flags.string({
      char: 'n',
      description: 'name of the server to to pull configs for'
    })
  };

  module.exports = BootstrapCommand;

}).call(this);

//# sourceMappingURL=bootstrap.js.map
