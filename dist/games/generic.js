// Generated by CoffeeScript 2.4.1
(function() {
  var Chalk, GenericServer, execSync, fs;

  fs = require("fs");

  Chalk = require("chalk");

  ({execSync} = require("child_process"));

  GenericServer = class GenericServer {
    static install(flags) {
      console.info(Chalk.blue.bold("Installing, please wait... ⏳"));
      execSync(`mkdir -p /home/${flags.config.meta.user}/${flags.config.meta.game}-server`);
      return this.createCache(flags);
    }

    static createUnitFile(flags) {
      var unitFileContents, unit_path;
      unit_path = `/home/${flags.config.meta.user}/.config/systemd/user/${flags.config.meta.game}.service`;
      unitFileContents = `[Unit]\nAfter=network.target\nDescription=Daemon for ${flags.config.meta.game} dedicated server\n[Install]\nWantedBy=default.target\n[Service]\nType=simple\nWorkingDirectory=${flags.path}\nExecStart=/bin/bash ${flags.path}/launch.sh`;
      execSync(`rm -f ${unit_path}`);
      execSync(`touch ${unit_path}`);
      return execSync(`echo '${unitFileContents}' >> ${unit_path}`);
    }

    static createLaunchScript(flags, launchFileContents) {
      var launchFilePath, logFilePath;
      logFilePath = `${flags.path}/console.log`;
      launchFilePath = `${flags.path}/launch.sh`;
      this.backupFile(launchFilePath);
      execSync(`rm -f ${launchFilePath}`);
      execSync(`touch ${launchFilePath}`);
      execSync(`echo '${launchFileContents}' >> ${launchFilePath}`);
      return execSync(`chmod +x ${launchFilePath}`);
    }

    static createLogFile(flags) {
      return execSync(`touch ${flags.path}/console.log`);
    }

    static backupFile(file) {
      execSync(`touch ${file}`);
      execSync(`rm -f ${file}.backup`);
      return execSync(`mv ${file} ${file}.backup`);
    }

    static createCache(flags) {
      return fs.writeFile(`${flags.path}/cache.json`, JSON.stringify(flags), (err) => {
        if (err) {
          throw err;
        }
      });
    }

  };

  module.exports = GenericServer;

}).call(this);

//# sourceMappingURL=generic.js.map
