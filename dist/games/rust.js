// Generated by CoffeeScript 2.4.1
(function() {
  var GenericServer, RustServer, execSync;

  GenericServer = require("./generic");

  ({execSync} = require("child_process"));

  RustServer = class RustServer extends GenericServer {
    static install(flags) {
      var install_cmd, steamLogin;
      super.install(flags);
      steamLogin = `+login ${flags.config.steamUserName} ${flags.config.steamPassword}`;
      install_cmd = `steamcmd ${steamLogin} +force_install_dir ${flags.path} +app_update ${flags.config.appId} validate +quit`;
      if (flags.dryrun !== true) {
        execSync(install_cmd);
      }
      this.createUnitFile(flags);
      return this.createLaunchScript(flags);
    }

    static createUnitFile(flags) {
      return super.createUnitFile(flags);
    }

    static createLaunchScript(flags) {
      var launchFileContents;
      //# Because of the export LD_LIBRARY_PATH bullshit, this is way more work than it looks
      launchFileContents = `export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:${flags.path}/RustDedicated_Data/Plugins/x86_64\n./RustDedicated +server.ip ${flags.config.ip} +server.port ${flags.config.gamePort} +server.identity rust +rcon.web 1 +rcon.ip ${flags.config.ip} +rcon.port ${flags.config.rconPort} +rcon.password ${flags.config.rconPassword}`;
      return super.createLaunchScript(flags, launchFileContents);
    }

    static createLogFile(flags) {
      return execSync(`touch ${flags.path}/${flags.config.meta.game}/console.log`);
    }

    static backupFile(file) {
      execSync(`touch ${file}`);
      execSync(`rm -f ${file}.backup`);
      return execSync(`mv ${file} ${file}.backup`);
    }

  };

  module.exports = RustServer;

}).call(this);

//# sourceMappingURL=rust.js.map
