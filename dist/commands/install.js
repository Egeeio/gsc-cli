// Generated by CoffeeScript 2.4.1
(function() {
  var Chalk, Command, GameServer, InstallCommand, execSync, flags, fs;

  fs = require("fs");

  Chalk = require("chalk");

  GameServer = require("../server_builder");

  ({Command, flags} = require('@oclif/command'));

  ({execSync} = require('child_process'));

  InstallCommand = class InstallCommand extends Command {
    flagParser(flags) {
      var e, installData, jsonConfig;
      if (flags.file && flags.name) {
        this.log(Chalk.red.bold("Using -f and -n flags together is not supported. Use one or the other."));
        return process.exit();
      } else if (flags.file) {
        try {
          jsonConfig = JSON.parse(fs.readFileSync(flags.file));
          flags.config = jsonConfig;
          flags.path = `/home/${flags.config.meta.user}/${flags.config.meta.game}-server`;
          this.log(`server will be installed to ${flags.path}`);
          execSync(`mkdir -p /home/${flags.config.meta.user}/.config/systemd/user`);
        } catch (error) {
          e = error;
          this.log(Chalk.red.bold(`Error parsing config file: ${e}`));
          process.exit();
        }
        return jsonConfig;
      } else {
        installData = flags.name;
        return installData;
      }
    }

    run() {
      ({flags} = this.parse(InstallCommand));
      this.flagParser(flags);
      return GameServer.install(flags);
    }

  };

  InstallCommand.description = "install a dedicated game server as a daemon";

  InstallCommand.flags = {
    name: flags.string({
      char: 'n',
      description: 'name of the server to install'
    }),
    file: flags.string({
      char: 'f',
      description: 'path to the config file'
    }),
    dryrun: flags.boolean({
      char: 'd',
      description: 'test installing a server without actually installing it'
    })
  };

  module.exports = InstallCommand;

}).call(this);

//# sourceMappingURL=install.js.map
